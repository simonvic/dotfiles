#!/bin/bash

###############################################################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)
#
#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles
#
###############################################################################

# Choose whether the wakelock command will change DPMS and/or screensaver
wakelockUsesDPMS=true
wakelockUsesScreensaver=true

# Sound to play (usually located in /usr/share/sounds/)
notificationSound=/usr/share/sounds/freedesktop/stereo/message.oga
notificationUID=6901
notificationAppName="simonvic.Battery"

batteryPollCache=/tmp/simonvic/sBatteryctl/pollCache
wakelockStatusPath=/tmp/simonvic/sBatteryctl/wakelockStatus

# "timeout;urgency;title;body"
notificationFullCharge="3000;normal;Battery fully charged;Battery fully charged"

##
# [threshold]="timeout;urgency;title;body"
declare -A notificationChargeThresholds=(
[90]="2000;normal;Almost full battery;Battery is almost full"
[80]="2000;normal;Good battery level;It's over HEIGHTTHOUSAND!!!"
[50]="1500;normal;Medium battery level;Battery is at <b>#{level} %</b>"
)

##
# [threshold]="timeout;urgency;title;body"
declare -A notificationDischargeThresholds=(
[50]="2000;low;Medium battery level;Battery is at <b>#{level} %</b>"
[33]="3000;normal;Low battery level;Battery will need to be charged soon"
[15]="3000;critical;Very low battery level;Battery is at a very low level!"
[5]="3000;critical;Critical battery level;Battery is at a critically low level!"
)

###############################################################################

usercfg=${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles/${0##*/}.sh
[[ -e "$usercfg" ]] && source "$usercfg"

###############################################################################

##
#	Get current battery charging status 
#	@return charging state (i.e. Charging, Discharging, Not Charging)
function getChargeState() {
	acpi -b | awk -F '[,:%]' '{print $2}' | cut -d ' ' -f2,3
}

##
#	Get current battery charge value in percentage
#	@return charge level
function getChargeLevel() {
	acpi -b | awk -F '[,%]' '{print $2}' | cut -d ' ' -f2
}

##
#	Get time to fully charge/discharge
#	@return time in format "HH:mm:ss remaining/to full charge"
function getTime() {
	acpi -b | awk -F ", " '{print $3}'
}

##
#	Get current battery temperature in Celsius, Fahrenheit or Kelvin
#	@param temperature unit (f)ahrenheit | (k)elvin | (c)elsius
#	@return temperature + unit
function getTemp() {
	local unit=""
	local unitLabel=""
	case $1 in
		fahrenheit | f)
			unit="-f"
			unitLabel="°F"
			;;
		kelvin | k)
			unit="-k"
			unitLabel="K"
			;;
		celsius | c | *)
			unit=""
			unitLabel="°C"
			;;
	esac
	echo "$(acpi -t $unit | awk -F ', ' '{print $2}' | cut -d ' ' -f1) $unitLabel"
}

##
#	Get if DPMS is enabled
#	@return true|false
function isDPMSEnabled() {
	[[ $(xset q | grep "DPMS is Enabled") ]] && echo true || echo false
}

##
#	Get if screensaver is enabled
#	@return true|false
function isScreensaverEnabled() {
	[[ $(xset -q | grep "timeout" | cut -d ' ' -f5) != 0 ]] && echo true || echo false
}

##
#	Set wakelock status
#	@param wakelock status
function updateWakelockStatus() {
	[[ ! -e "$wakelockStatusPath" ]] && mkdir -p "${wakelockStatusPath%/*}"
	if [[ -n "$1" ]]; then
		echo "$1" > "$wakelockStatusPath"
	else
		echo "off" > "$wakelockStatusPath"
	fi

}

##
#	Get current wakelock status
#	@return on|off
function getWakelockStatus() {
	if [[ ! -e "$wakelockStatusPath" ]]; then
		mkdir -p "${wakelockStatusPath%/*}"
		echo "off" > "$wakelockStatusPath"
	fi
	cat "$wakelockStatusPath"
}

##
#	Update polybar modules of wakelock
function updatePolybar() {
	sPolybarctl message "action wakelock hook 0"
}

##
#	Send notification and play sound
#	@param icon
#	@param timeout
#	@param urgency
#	@param title
#	@param body
function sendNotification() {
	[[ -n "$notificationSound" ]] && paplay "$notificationSound" --server /run/user/1000/pulse/native &
	notify-send \
		--app-name "$notificationAppName" \
		--replace-id "$notificationUID" \
		--icon "$1" \
		--expire-time "$2" \
		--urgency "$3" \
		"$4" "$5"
}

##
#	Send notification
#	@param icon
#	@param timeout
#	@param urgency
#	@param title
#	@param body
function sendNotificationSilent() {
	notify-send \
		--app-name "$notificationAppName" \
		--replace-id "$notificationUID" \
		--icon "$1" \
		--expire-time "$2" \
		--urgency "$3" \
		"$4" "$5"
}

##
#	Set the wakelock status.
#
#	Setting to "on" will disable DPMS (only if wakelockUsesDPMS == true)
#	and the Screensaver (only if wakeLockUsesScreensaver == true)
#
#	Setting to "of" will enable DPMS (only if wakelockUsesDPMS == true)
#	and the Screensaver (only if wakeLockUsesScreensaver == true)
#
#	If neither "on" nor "off" is specified it will be toggled between enabled/disabled
#	for DPMS and Screensaver
#
#	@param state [on|off]
function setWakelock() {
	local title="sBatteryctl | Wakelock"
	local body=""
	local urgency=normal
	local timeout=3500
	local icon=""
	local wakelockStatus=""

	case $1 in
		on)
			[[ $wakelockUsesDPMS == true ]] && xset -dpms
			[[ $wakelockUsesScreensaver == true ]] && xset s off
			wakelockStatus="on"
			;;
		off)
			[[ $wakelockUsesDPMS == true ]] && xset +dpms
			[[ $wakelockUsesScreensaver == true ]] && xset s on
			wakelockStatus="off"
			;;
		*)
			if [[ $wakelockUsesDPMS == true ]]; then
				if [[ $(isDPMSEnabled) == true ]]; then
					xset -dpms
					wakelockStatus="on"
				else
					xset +dpms
					wakelockStatus="off"
				fi
			fi

			if [[ $wakelockUsesScreensaver == true ]]; then
				if [[ $(isScreensaverEnabled) == true ]]; then
					xset s off
					wakelockStatus="on"
				else
					xset s on
					wakelockStatus="off"
				fi
			fi
			;;
	esac

	if [[ $wakelockUsesScreensaver == true ]] || [[ $wakelockUsesDPMS == true ]]; then
		[[ "$wakelockStatus" == "on" ]] && icon="caffeine-cup-full" || icon="caffeine-cup-empty"
		body="\
Wakelock is <b>$wakelockStatus</b>		
<small>DPMS: <b>$(isDPMSEnabled)</b>
Screensaver: <b>$(isScreensaverEnabled)</b></small>"

		updateWakelockStatus "$wakelockStatus"
		updatePolybar
		sendNotification "$icon" "$timeout" "$urgency" "$title" "$body"
	fi
}

##
#	Get the icon file name based on current battery charge value and status
#	@param charge value
#	@param charge status
#	@return icon file name
function getIcon() {
	local iconFileName="battery-"
	if [[ $1 -ge 100 ]]; then iconFileName=$iconFileName"100"
	elif [[ $1 -ge 80 ]]; then iconFileName=$iconFileName"080"
	elif [[ $1 -ge 60 ]]; then iconFileName=$iconFileName"060"
	elif [[ $1 -ge 40 ]]; then iconFileName=$iconFileName"040"
	elif [[ $1 -ge 20 ]]; then iconFileName=$iconFileName"020"
	elif [[ $1 -ge 0 ]]; then iconFileName=$iconFileName"000"
	else iconFileName="battery-missing"
	fi

	case $2 in
		"Charging") iconFileName=$iconFileName"-charging" ;;
		"Discharging") : ;;
		"Not charging") iconFileName="battery-full-charged" ;;
		*) iconFileName="battery-missing" ;;
	esac

	echo "$iconFileName"
}

##
# Cache last battery poll information
# @param threshold - last threshold hit
# @param level - battery level (0-100)
# @param state - battery state (Not charging, Charging, Discharging)
function cacheBatteryPoll() {
	mkdir -p "${batteryPollCache%/*}"
	echo "$1,$2,$3" > "$batteryPollCache"
}

##
# Send notification when monitoring battery
# @param threshold hit
# @param level
# @param state
function sendMonitorNotification() {
	local timeout urgency title body
	case $3 in
		"Not charging")
			IFS=";" read -r timeout urgency title body <<< "$notificationFullCharge"
			;;
		"Charging")
			IFS=";" read -r timeout urgency title body <<< "${notificationChargeThresholds[$threshold]}"
			;;
		"Discharging")
			IFS=";" read -r timeout urgency title body <<< "${notificationDischargeThresholds[$threshold]}"
			;;
	esac
	body=${body//#\{level\}/$level}
	sendNotificationSilent "$(getIcon "$level" "$state")" "$timeout" "$urgency" "$title" "$body"
}

##
# Monitor battery status and energy level, and send notifications when the level
# hits the configured thresholds
function monitor() {
	local level; level=$(getChargeLevel)
	local state; state=$(getChargeState)
	local lastThreshold lastLevel lastState
	if [[ -f "$batteryPollCache" ]]; then
		IFS=, read -r lastThreshold lastLevel lastState < "$batteryPollCache"
	fi
	[[ "$level" == "$lastLevel" && "$state" == "$lastState" ]] && return

	local hitThreshold
	case "$state" in
		"Not charging") 
			hitThreshold=-1
			if [[ "$hitThreshold" != "$lastThreshold" ]]; then
				sendMonitorNotification "$hitThreshold" "$level" "$state"
			fi
			;;

		"Charging")
			for threshold in $(printf "%s\n" "${!notificationChargeThresholds[@]}" | sort -nr); do
				if [[ "$level" -ge threshold ]]; then
					hitThreshold=$threshold
					if [[ "$hitThreshold" != "$lastThreshold" ]]; then
						sendMonitorNotification "$hitThreshold" "$level" "$state"
					fi
					break
				fi
			done
			;;

		"Discharging") 
			for threshold in $(printf "%s\n" "${!notificationDischargeThresholds[@]}" | sort -n); do
				if [[ "$level" -le threshold ]]; then
					hitThreshold=$threshold
					if [[ "$hitThreshold" != "$lastThreshold" ]]; then
						sendMonitorNotification "$hitThreshold" "$level" "$state"
					fi
					break
				fi
			done
 			;;
	esac
	cacheBatteryPoll "$hitThreshold" "$level" "$state"
}

##
#	Show a notification regarding plugging in the battery charger
function plugin() {
	local chargeLevel; chargeLevel=$(getChargeLevel)
	local chargeState; chargeState=$(getChargeState)
	local title="$chargeLevel %"
	local body="AC plugged"
	local urgency=low
	local timeout=1500
	local icon; icon=$(getIcon "$chargeLevel" "$chargeState")
	sendNotification "$icon" "$timeout" "$urgency" "$title" "$body"
}

##
#	Show a notification regarding unplugging in the battery charger
function unplug() {
	local chargeLevel; chargeLevel=$(getChargeLevel)
	local chargeState; chargeState=$(getChargeState)
	local title="$chargeLevel %"
	local body="<b>AC unplugged</b>"
	local urgency=low
	local timeout=1500
	local icon; icon=$(getIcon "$chargeLevel" "$chargeState")
	sendNotification "$icon" "$timeout" "$urgency" "$title" "$body"
}

##
#	Show a notification regarding current stats of the battery
function current() {
	local chargeLevel; chargeLevel=$(getChargeLevel)
	local chargeState; chargeState=$(getChargeState)
	local temp; temp=$(getTemp "celsius")
	local time; time=$(getTime)

	local title="$chargeLevel %"
	local body="\
<b>$chargeState</b>
<small>$time
$temp</small>"
	local urgency=normal
	local timeout=3000
	local icon; icon=$(getIcon "$chargeLevel" "$chargeState")

	sendNotification "$icon" "$timeout" "$urgency" "$title" "$body"
}

##
#	Manage the wakelock
function wakelock() {
	if [[ -z $1 ]]; then
		printUsage
	else
		case $1 in
			toggle | t) setWakelock "$2" ;;
			status | s) getWakelockStatus ;;
			#TODO add settings for dpms and screensaver
			*) printUsage ;;
		esac
	fi
}

##
# Print script usage
function printUsage() {
	printf "%s\n" "
- Usage
	sBatteryctl <options>

-Options
	help                        # Show this help
	monitor                     # Monitor the state of the battery
	                              Meant to be used in a crontab or timer
	plugin                      # Show notification about plugging AC
	unplug                      # Show notification about unplugging AC
	current                     # Show current information on the battery
	wakelock toggle [on|off]    # Toggle on/off the wakelock
	wakelock status             # Print current wakelock status

- Abbreviations
	m = monitor
	p = plugin
	u = unplug
	c = current
	w = wakelock
	t = toggle
	s = status
"
}

case $1 in
	monitor | m) monitor ;;
	plugin | p) plugin ;;
	unplug | u) unplug ;;
	current | c) current ;;
	wakelock | w) wakelock "$2" "$3" ;;
	help | *) printUsage ;;
esac
