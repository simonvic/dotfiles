#!/bin/bash

###############################################################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)
#
#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles
#
###############################################################################

secondsBetweenTries=0.5
maxTries=4

###############################################################################

usercfg=${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles/${0##*/}.sh
[[ -e "$usercfg" ]] && source "$usercfg"

###############################################################################

##
#	Get if bluetooth is powered on
#	@return true|false
function isPowered() {
	[[ $(bluetoothctl show | grep "Powered: yes") ]] && echo true || echo false
}

##
#	Get if bluetooth is powering on or off
#	@return true|false
function isPowering() {
	[[ $(bluetoothctl show | grep -E "PowerState: off-enabling|PowerState: on-disabling") ]] && echo true || echo false
}

##
#	Get if connected to a bluetooth device
#	@return true|false
function isConnected() {
	[[ $(bluetoothctl info | grep "Connected: yes") ]] && echo true || echo false
}

##
#	Update all polybar modules of bluetooth
#	Hook triggered:
#		1: powered off
#		2: powering on/off
#		3: powered on
#		4: connected
function updatePolybar() {
	if [[ $(isPowering) == true ]]; then
		sPolybarctl message "action bluetooth hook 2"
    elif [[ $(isPowered) == true ]]; then
    	if [[ $(isConnected) == true ]]; then
			sPolybarctl message "action bluetooth hook 4"
    	else
			sPolybarctl message "action bluetooth hook 3"
    	fi
    else
			sPolybarctl message "action bluetooth hook 1"
    fi
	# sPolybarctl message "action earbuds hook 0"
	# sPolybarctl message "action earbuds-extended hook 0"
}

##
#	Change bluetooth power
#	@param toggle,on or off
function power() {
	local newState=$1
	if [[ $newState == "toggle" ]]; then
		if [[ $(isPowered) == true ]]; then
			newState="off"
		else
			newState="on"
		fi
	fi
	bluetoothctl power "$newState"
	updatePolybar
	local tries=0
	while [[ $(isPowering) == true ]] && [[ $tries -lt $maxTries ]]; do
		sleep $secondsBetweenTries
		((tries++))
	done
	updatePolybar
}


##
#	Find the device UUID given a name
#	@param device name
#	@return device UUID
function findDeviceUUID() {
	bluetoothctl devices | grep -i "$1" | awk -F ' ' '{print $2}'
}

##
#	Check if connected to device
#	@param UUID of device
#	@return boolean
function isConnectedTo() {
	[[ $(bluetoothctl devices Connected | grep "$1") ]] && echo true || echo false
}

##
#	Connect to a device
#	@param device name
function connect() {
	if [[ -z "$1" ]]; then
		printUsage
		return
	fi
	if [[ $(isPowered) == "false" ]]; then
		power on
	fi
	local tries=0
	local uuid; uuid=$(findDeviceUUID "$1")
	bluetoothctl connect "$uuid"
	while [[ $(isConnectedTo "$uuid") == false ]] && [[ $tries -lt $maxTries ]]; do
		sleep $secondsBetweenTries
		((tries++))
	done
	updatePolybar
}

function printUsage() {
	printf "%s\n" "
- Usage
	sBluetoothctl <options>

- Options
	help                                # Show this help
	power <toggle|on|off>               # Switch on or off the bluetooth, or
	                                        toggle between the states
	connect <device UUID|device Name>   # Power on bluetooth if necessary and
	                                        connect to <device UUID> (xx:xx:xx:xx:xx:xx)
	                                        or <device Name> (i.e. 'Galaxy buds')
	polybar update                      # Update polybar modules

- Abbreviations
	p = power
	c = connect
"
}

case $1 in
	power | p) power "$2" ;;
	connect | c) connect "$2" ;;
	polybar)
		case $2 in
			update) updatePolybar ;;
			*) printUsage ;;
		esac
		;;
	help | *) printUsage ;;
esac
