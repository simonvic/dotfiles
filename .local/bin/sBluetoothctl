#!/bin/bash

###############################################################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)
#
#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles
#
###############################################################################

notificationUID=6911
notificationAppName="simonvic.Bluetoothctl"
notificationSound="/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"
notificationTimeoutMS=3000
notificationUrgency=normal
notificationDefaultIcon="bluetooth"

matchingMode="fuzzy"
dmenu_theme="simonvic/glass/notification_actions"

secondsBetweenTries=0.5
maxTries=4

###############################################################################

usercfg=${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles/${0##*/}.sh
[[ -e "$usercfg" ]] && source "$usercfg"

###############################################################################

##
#	Get if bluetooth is powered on
#	@return true|false
function isPowered() {
	[[ $(bluetoothctl show | grep "Powered: yes") ]] && echo true || echo false
}

##
#	Get if bluetooth is powering on or off
#	@return true|false
function isPowering() {
	[[ $(bluetoothctl show | grep -E "PowerState: off-enabling|PowerState: on-disabling") ]] && echo true || echo false
}

##
#	Get if connected to a bluetooth device
#	@return true|false
function isConnected() {
	[[ $(bluetoothctl info | grep "Connected: yes") ]] && echo true || echo false
}

##
#	Update all polybar modules of bluetooth
#	Hook triggered:
#		1: powered off
#		2: powering on/off
#		3: powered on
#		4: connected
function updatePolybar() {
	if [[ $(isPowering) == true ]]; then
		sPolybarctl message "action bluetooth hook 2"
    elif [[ $(isPowered) == true ]]; then
    	if [[ $(isConnected) == true ]]; then
			sPolybarctl message "action bluetooth hook 4"
    	else
			sPolybarctl message "action bluetooth hook 3"
    	fi
    else
			sPolybarctl message "action bluetooth hook 1"
    fi
	# sPolybarctl message "action earbuds hook 0"
	# sPolybarctl message "action earbuds-extended hook 0"
}

##
#	Change bluetooth power
#	@param toggle,on or off
function power() {
	local newState=$1
	if [[ $newState == "toggle" ]]; then
		if [[ $(isPowered) == true ]]; then
			newState="off"
		else
			newState="on"
		fi
	fi
	bluetoothctl power "$newState"
	updatePolybar
	local tries=0
	while [[ $(isPowering) == true ]] && [[ $tries -lt $maxTries ]]; do
		sleep $secondsBetweenTries
		((tries++))
	done
	updatePolybar
}


##
#	Find the device UUID given a name
#	@param device name
#	@return device UUID
function findDeviceUUID() {
	bluetoothctl devices | grep -i "$1" | awk -F ' ' '{print $2}'
}

##
#	Check if connected to device
#	@param UUID of device
#	@return boolean
function isConnectedTo() {
	[[ $(bluetoothctl devices Connected | grep "$1") ]] && echo true || echo false
}

##
#	Connect to a device
#	@param device name
function connect() {
	if [[ -z "$1" ]]; then
		printUsage
		return
	fi
	if [[ $(isPowered) == "false" ]]; then
		power on
	fi
	local tries=0
	local uuid; uuid=$(findDeviceUUID "$1")
	bluetoothctl connect "$uuid"
	while [[ $(isConnectedTo "$uuid") == false ]] && [[ $tries -lt $maxTries ]]; do
		sleep $secondsBetweenTries
		((tries++))
	done
	updatePolybar
}

##
#	Disconnect from a device
#	@param device name
function disconnect() {
	if [[ -z "$1" ]]; then
		printUsage
		return
	fi
	if [[ $(isPowered) == "false" ]]; then
		return
	fi
	local tries=0
	local uuid; uuid=$(findDeviceUUID "$1")
	bluetoothctl disconnect "$uuid"
	while [[ $(isConnectedTo "$uuid") != false ]] && [[ $tries -lt $maxTries ]]; do
		sleep $secondsBetweenTries
		((tries++))
	done
	updatePolybar
}

##
# Helper function for notifications
# @param body
# @param icon (default: $notificationDefaultIcon)
# @param timeout (default: notificationTimeoutMS)
function sendNotification() {
	[[ -n "$notificationSound" ]] && paplay "$notificationSound" --server /run/user/1000/pulse/native &
	notify-send \
		--app-name "$notificationAppName" \
		--replace-id "$notificationUID" \
		--icon "${2:-$notificationDefaultIcon}" \
		--expire-time "${3:-$notificationTimeoutMS}" \
		--urgency "$notificationUrgency" \
		"sBluetoothctl" "$1"
}

##
# Print icon based on device type
# From: https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/src/dbus-common.c
# @param device type
# @return icon
function prettifyIcon() {
	local icon
	case "$1" in
		"audio-card") icon="Û±Äû" ;;
		"audio-headphones") icon="Û∞ãã" ;;
		"audio-headset") icon="Û∞ãé" ;;
		"camera-photo") icon="ÔÄ∞" ;;
		"camera-video") icon="ÔÄΩ" ;;
		"computer") icon="üñ•" ;;
		"input-gaming") icon="Û∞ÆÇ" ;;
		"input-keyboard") icon="Û∞åå" ;;
		"input-mouse") icon="Û∞çΩ" ;;
		"input-tablet") icon="Û∞ì∂" ;;
		"modem") icon="Û±Çá" ;;
		"multimedia-player") icon="Û±Äû" ;;
		"network-wireless") icon="Û∞ë©" ;;
		"phone") icon="ÔÑã" ;;
		"printer") icon="Û∞ê™" ;;
		"scanner") icon="Û∞ö´" ;;
		"unknown") icon="?" ;;
		"video-display") icon="Û∞çπ" ;;
		*) icon=$1
	esac
	printf "%s" "$icon"
}

##
# Build prettified line with device details (meant for rofi-dmenu)
# @param uuid
# @param name
# @param details
# @return prettified device info
function prettifyDevice() {
	local uuid=$1
	local name=$2
	local details=$3
	local output

	output+="$(prettifyIcon "$(grep "Icon:" <<< "$details" | sed 's/.*: //')") "

	output+=" $name | <small><i>$uuid</i></small>"

	local battery
	battery=$(grep "Battery Percentage" <<< "$details" | sed 's/.*(\([0-9]*\))/\1/')
	if [[ -n "$battery" ]]; then
		output+=" | <small><i>Û∞Åæ $battery%</i></small>"
	fi

	output+=" | "
	grep -q "Paired: yes" <<< "$details" && output+=" Ôëå "
	grep -q "Bonded: yes" <<< "$details" && output+=" Û±Üü "
	grep -q "Trusted: yes" <<< "$details" && output+=" Û∞¥≥ "
	grep -q "Blocked: yes" <<< "$details" && output+=" ÔëÆ "

	printf "%s%s" "$output" "\n"
}

##
# Open menu (rofi)
function menu() {
	local paired; paired=$(bluetoothctl devices)
	local i=0
	local ignored uuid name connectedIdxs prettyDevices
	while read -r ignored uuid name; do
		local details; details=$(bluetoothctl info "$uuid")
		if grep -q "Connected: yes" <<< "$details"; then
			if [[ -z "$connectedIdxs" ]]; then
				connectedIdxs="$i"
			else
				connectedIdxs+=",$i"
			fi
		fi
		prettyDevices+=$(prettifyDevice "$uuid" "$name" "$details")
		((i++))
	done <<< "$paired"
	sendNotification "Select bluetooth device..." "$notificationDefaultIcon" 0
	local selectedIdx; selectedIdx=$(printf "%b" "$prettyDevices" | rofi -dmenu \
		-i \
		-markup-rows \
		-matching "$matchingMode" \
		-format "i" \
		-a "$connectedIdxs" \
		-p "ÓôÑ " \
		-theme "$dmenu_theme" \
	)

	if [[ -z "$selectedIdx" ]]; then
		# hacky way to close notification via notify-send
		# replace current notification (id) with one that lasts 1ms
		notify-send --replace-id "$notificationUID" --expire-time 1 " "
		return
	fi

	local selectedUUID
	read -r ignored selectedUUID selectedName <<< "$(printf "%s" "$paired" | head -$((selectedIdx + 1)) | tail -1)"
	if bluetoothctl info "$selectedUUID" | grep -q "Connected: yes"; then
		sendNotification "Disconnecting from\n<b>$selectedName\n(<small>$selectedUUID</small>)</b>"
		disconnect "$selectedUUID"
		sendNotification "Disconnected from\n<b>$selectedName\n(<small>$selectedUUID</small>)</b>"
	else
		sendNotification "Connecting to\n<b>$selectedName\n(<small>$selectedUUID</small>)</b>"
		connect "$selectedUUID"
		sendNotification "Connected to\n<b>$selectedName\n(<small>$selectedUUID</small>)</b>"
	fi

}

function printUsage() {
	printf "%s\n" "
- Usage
	sBluetoothctl <options>

- Options
	help                    # Show this help
	power <toggle|on|off>   # Switch on or off the bluetooth, or
	                            toggle between the states
	connect <UUID|name>     # Power on bluetooth if necessary and
	                            connect to <device UUID> (xx:xx:xx:xx:xx:xx)
	                            or <device Name> (i.e. 'Galaxy buds')
	disconnect <UUID|name>  # Disconnect from <device UUID> (xx:xx:xx:xx:xx:xx)
	                            or <device Name> (i.e. 'Galaxy buds')
	menu                    # Show connect menu
	polybar update          # Update polybar modules

- Abbreviations
	p = power
	c = connect
	d = disconnect
	m = menu
"
}

case $1 in
	p | power) power "$2" ;;
	c | connect) connect "$2" ;;
	d | disconnect) disconnect "$2" ;;
	m | menu) menu ;;
	polybar)
		case $2 in
			update) updatePolybar ;;
			*) printUsage ;;
		esac
		;;
	help | *) printUsage ;;
esac
