#!/bin/bash

###############################################################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)
#
#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles
#
###############################################################################

notificationUID=6903
notificationAppName="simonvic.Brightness"
notificationSound="/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"
notificationTimeoutMS=1500

# Default icons
notificationLowIcon="display-brightness-low-symbolic"
notificationMediumIcon="display-brightness-medium-symbolic"
notificationHighIcon="display-brightness-high-symbolic"

# Notification body format
# where two %s are for ASCII bar and right text
notificationBodyFormat="<tt>%s<small><b>%6s</b></small></tt>"
notificationBodyFormatRedshift="<tt>%s<small><b>%12s</b></small></tt>"

notificationBarLength=20
notificationBarStep=5
notificationBarChars="█;▆;▅;▃;▁;░"
notificationBarBorders=";;;;;;;"

# Labels for polybar module
redshiftOnLabel="󰌶"
redshiftOffLabel= #"󰹐"

# Default values
defaultBrightnessChangeValue=1
defaultTempChangeValue=100
screensaverBrightnessValue=1
# Transitions smoothnesss and time
fade_steps=1
fade_time=100
fade_fps=240

screensaver_steps=50
screensaver_time=1000
screensaver_fps=240

# Store redshift status and temperature
redshiftStateFile=${XDG_DATA_HOME:-$HOME/.local/share}/simonvic/${0##*/}/redshift.sh
if [[ ! -e "$redshiftStateFile" ]]; then
	mkdir -p "${redshiftStateFile%/*}"
	echo "redshiftEnabled=false" >> "$redshiftStateFile"
	echo "redshiftTemperature=3400" >> "$redshiftStateFile"
fi
source "$redshiftStateFile"
: "${redshiftEnabled:=false}"
: "${redshiftTemperature:=3400}"

###############################################################################

usercfg=${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles/${0##*/}.sh
[[ -e "$usercfg" ]] && source "$usercfg"

###############################################################################

##
#	Get brightness level
#	@return brightness [0 - 100]
function getBrightness() {
	xbacklight -get
}

##
#	Set brightness level
#	@param brightness [0 - 100]
function setBrightness() {
	xbacklight -set $1
}

##
#	Change brightness level
#	@param -inc | -dec
#	@param amount default: defaultBrightnessChangeValue
function changeBrightness() {
	xbacklight $1 "${2:-$defaultBrightnessChangeValue}" -steps "$fade_steps" -time "$fade_time"
}

##
#	Toggle Redshift status
function toggleRedshift() {
	if [[ "$redshiftEnabled" == true ]]; then
		redshift -x
		redshiftEnabled=false
	else
		redshift -P -O "$redshiftTemperature"
		redshiftEnabled=true
	fi
	sed -i "s/redshiftEnabled=.*/redshiftEnabled=$redshiftEnabled/" "$redshiftStateFile"
}

##
#	Change redshift temperature
#	@param temperature [1000 - 25000]
function setRedshiftTemperature() {
	if [[ "$1" -gt 1000 ]] && [[ "$1" -lt 25000 ]]; then
		redshiftTemperature=$1
		redshiftEnabled=true
		redshift -P -O "$redshiftTemperature"
		sed -i "s/redshiftEnabled=.*/redshiftEnabled=$redshiftEnabled/" "$redshiftStateFile"
		sed -i "s/redshiftTemperature=.*/redshiftTemperature=$redshiftTemperature/" "$redshiftStateFile"
	fi
}

##
#	Build ASCII bar
#	@param current brightness
function buildBar() {
	DrawBar.sh                               \
		--length "$notificationBarLength"    \
		--step "$notificationBarStep"        \
		--value "$1"                         \
		--bar-chars "$notificationBarChars"  \
		--borders "$notificationBarBorders"
}


##
#	Send notification
function sendNotification() {
	local body=""
	local icon=""
	local urgency=normal
	local brightness; brightness=$(getBrightness)
	local summary=""
	local bodyFormat=""
	local bar; bar=$(buildBar "$brightness")

	if [[ $brightness -ge 75 ]]; then		
		icon=$notificationHighIcon
	elif [[ $brightness -gt 25 ]]; then
		icon=$notificationMediumIcon
	else
		icon=$notificationLowIcon
	fi

	[[ -n "$notificationSound" ]] && paplay "$notificationSound" --server /run/user/1000/pulse/native &
	if [[ "$redshiftEnabled" == true ]]; then
		summary="$brightness% ${redshiftTemperature}k"
		bodyFormat=$notificationBodyFormatRedshift
	else
		summary="$brightness%"
		bodyFormat=$notificationBodyFormat
	fi

	body=$(printf "$bodyFormat" "$bar" "$summary" )
	# Send the notification
	notify-send \
		--app-name "$notificationAppName" \
		--replace-id "$notificationUID" \
		--icon "$icon" \
		--expire-time "$notificationTimeoutMS" \
		--urgency "$urgency" \
		"$summary" "$body"
}

##
#	Print redshift label for polybar module
#	@param extended
function printTemperature() {
	local body=""
	local suffix=""
	if [[ "$redshiftEnabled" == false ]]; then
		suffix=$redshiftOffLabel
	else
		suffix=$redshiftOnLabel
		if [[ "$1" = "extended" ]]; then
			body="$redshiftTemperature K"
		fi
	fi
	echo "$suffix$body"
}

function restoreRedshift() {
	if [[ "$redshiftEnabled" == true ]]; then
		redshift -P -O "$redshiftTemperature"
	fi

}

function screensaver() {
	trap 'exit 0' TERM INT
	trap "setBrightness $(getBrightness); kill %%" EXIT
	setBrightness "$screensaverBrightnessValue -fps $screensaver_fps -time $screensaver_time"
	sleep 2147483647 &
	wait
}

##
#	Update polybar modules
function updatePolybar() {
	sPolybarctl message "action redshift hook 0"
	sPolybarctl message "action redshift-extended hook 0"
	sPolybarctl message "action brightness hook 0"
	sPolybarctl message "action brightness-extended hook 0"
}

function printUsage() {
	printf "%s\n" "
- Usage
	sBrightnessctl <options> [...]

- Options
	help                         # Show this help
	increase [amount]            # Increase the brightness by [amount] if specified or the default value otherwise
	decrease [amount]            # Decrease the brightness by [amount] if specified or the default value otherwise
	set <value>                  # Set the brightness to <value>
	screensaver                  # Lower the brightness to the minimum
	redshift toggle              # Toggle on/off redshift
	redshift increase [amount]   # Increase the redshift temperature by [amount] if specified or the default value otherwise
	redshift decrease [amount]   # Decrease the redshift temperature by [amount] if specified or the default value otherwise
	redshift restore             # Load previously saved redshift state
	redshift print               # Print the current redshift temperature (used in polybar)

	- Abbreviations
	i = increase
	d = decrease
	s = set
	r = redshift
	t = toggle
"
}

case $1 in
	increase | i)
		changeBrightness -inc "$2"
		updatePolybar
		sendNotification
		;;
	decrease | d)
		changeBrightness -dec "$2"
		updatePolybar
		sendNotification
		;;
	set | s)
		setBrightness "$2 -step $fade_fps -time $fade_time"
		updatePolybar
		sendNotification
		;;
	screensaver)
		screensaver
		updatePolybar
		;;
	redshift | r)
		case $2 in
			toggle | t)
				toggleRedshift
				updatePolybar
				sendNotification
				;;
			increase | i)
				setRedshiftTemperature $((redshiftTemperature + ${3:-$defaultTempChangeValue}))
				updatePolybar
				sendNotification
				;;
			decrease | d)
				setRedshiftTemperature $((redshiftTemperature - ${3:-$defaultTempChangeValue}))
				updatePolybar
				sendNotification
				;;
			restore | r)
				restoreRedshift
				;;
			print)
				printTemperature "$3"
				;;
		esac
		;;
	help | *) printUsage ;;
esac
