#!/bin/bash

###############################################################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)
#
#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles
#
###############################################################################

notificationUID=6903
notificationAppName="simonvic.Brightness"
notificationSound="/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"
notificationTimeoutMS=1500

# Default icons
notificationLowIcon="display-brightness-low-symbolic"
notificationMediumIcon="display-brightness-medium-symbolic"
notificationHighIcon="display-brightness-high-symbolic"

# Notification body format
# where two %s are for ASCII bar and right text
notificationBodyFormat="<tt>%s<small><b>%6s</b></small></tt>"
notificationBodyFormatRedshift="<tt>%s<small><b>%12s</b></small></tt>"

notificationBarLength=20
notificationBarStep=5
notificationBarChars="█;▆;▅;▃;▁;░"
notificationBarBorders=";;;;;;;"

# Labels for polybar @deprecated
brightnessLowLabel="󰃞"
brightnessMediumLabel="󰃝"
brightnessHighLabel="󰃟"
brightnessMaxLabel="󰃠"

# Labels for polybar module
redshiftOnLabel="󰌶"
redshiftOffLabel= #"󰹐"

# Default values
defaultBrightnessChangeValue=1
defaultTempChangeValue=100
screensaverBrightnessValue=1
# Transitions smoothnesss and time
fade_steps=1
fade_time=100
fade_fps=240

screensaver_steps=50
screensaver_time=1000
screensaver_fps=240

# Store redshift status and temperature
redshiftState=~/.config/i3/scripts/redshift.sh
source $redshiftState


###############################################################################

usercfg=${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles/${0##*/}.sh
[[ -e "$usercfg" ]] && source "$usercfg"

###############################################################################

##
#	Get brightness level
#	@return brightness [0 - 100]
function getBrightness() {
	xbacklight -get
}

##
#	Set brightness level
#	@param brightness [0 - 100]
function setBrightness() {
	xbacklight -set $1
}

##
#	Change brightness level
#	@param -inc | -dec
#	@param amount
function changeBrightness() {
	if [[ -z $2 ]]; then
		xbacklight $1 $defaultBrightnessChangeValue -steps $fade_steps -time $fade_time
	else
		xbacklight $1 $2 -steps $fade_steps -time $fade_time
	fi
}


##
#	Get if redshift is on
#	@return true|false
function isRedshiftOn() {
	[[ $REDSHIFT_STATUS == on ]] && echo true || echo false
}

##
#	Get redshift temperature
#	@return temperature in kelvin
function getRedshiftTemperature() {
	echo $REDSHIFT_TEMP
}

##
#	Toggle Redshift status
function toggleRedshift() {
	if [[ "$REDSHIFT_STATUS" == on ]]; then
		sed -i "s/REDSHIFT_STATUS=on/REDSHIFT_STATUS=off/g" $redshiftState
		redshift -x
		REDSHIFT_STATUS=off
	elif [[ "$REDSHIFT_STATUS" == off ]]; then
		sed -i "s/REDSHIFT_STATUS=off/REDSHIFT_STATUS=on/g" $redshiftState
		redshift -O "$REDSHIFT_TEMP"
		REDSHIFT_STATUS=on
	fi
}

##
#	Change redshift temperature
#	@param temperature [1000 - 25000]
function changeTemp() {
	if [[ "$1" -gt 1000 ]] && [[ "$1" -lt 25000 ]]; then
		sed -i "s/REDSHIFT_TEMP=$REDSHIFT_TEMP/REDSHIFT_TEMP=$1/g" $redshiftState
		redshift -P -O $1
		REDSHIFT_TEMP=$1
	fi
}

##
#	Build ASCII bar
#	@param current brightness
function buildBar() {
	DrawBar.sh                               \
		--length $notificationBarLength      \
		--step $notificationBarStep          \
		--value $1                           \
		--bar-chars "$notificationBarChars"  \
		--borders "$notificationBarBorders"
}


##
#	Send notification
function sendNotification() {
	local body=""
	local icon=""
	local urgency=normal
	local brightness=$(getBrightness)
	local summary=""
	local bodyFormat=""
	local bar="$(buildBar $brightness)"
	
	if [[ $brightness -ge 75 ]]; then		
		icon=$notificationHighIcon
	elif [[ $brightness -gt 25 ]]; then
		icon=$notificationMediumIcon
	else
		icon=$notificationLowIcon
	fi

	[[ -n "$notificationSound" ]] && paplay "$notificationSound" --server /run/user/1000/pulse/native &
	if $(isRedshiftOn); then
		summary="$brightness% $(getRedshiftTemperature)k"
		bodyFormat=$notificationBodyFormatRedshift
	else
		summary="$brightness%"
		bodyFormat=$notificationBodyFormat
	fi

	body=$(printf "$bodyFormat" "$bar" "$summary" )
	# Send the notification
	notify-send \
		--app-name "$notificationAppName" \
		--replace-id "$notificationUID" \
		--icon "$icon" \
		--expire-time "$notificationTimeoutMS" \
		--urgency "$urgency" \
		"$summary" "$body"

}

##
#	Print brightness label for polybar module
#	@param extended
function printBrightness() {
	local brightness=$(getBrightness)
	local suffix=""
	local body=""
	if [[ $brightness -le 20 ]]; then
		suffix=$brightnessLowLabel
	elif [[ $brightness -le 40 ]]; then
		suffix=$brightnessMediumLabel
	elif [[ $brightness -le 60 ]]; then
		suffix=$brightnessHighLabel
	elif [[ $brightness -le 100 ]]; then
		suffix=$brightnessMaxLabel
	fi

	if [[ "$1" == "extended" ]]; then
		bar="$(seq -s '─' 0 $((brightness / 10 - 1)) | sed 's/[0-9]//g')│"
		emptyBar="$(seq -s '─' 0 $((10 - brightness / 10)) | sed 's/[0-9]//g')"
		body="$brightness% $bar$emptyBar"
	fi
	echo "$suffix$body"

}

##
#	Print redshift label for polybar module
#	@param extended
function printTemperature() {
	local body=""
	local suffix=""
	if [[ $REDSHIFT_STATUS == off ]]; then
		suffix=$redshiftOffLabel
	else
		suffix=$redshiftOnLabel
		if [[ "$1" = "extended" ]]; then
			body="$REDSHIFT_TEMP K"
		fi
	fi
	echo "$suffix$body"
}

function screensaver() {
	trap 'exit 0' TERM INT
	trap "setBrightness $(getBrightness); kill %%" EXIT
	setBrightness "$screensaverBrightnessValue -fps $screensaver_fps -time $screensaver_time"
	sleep 2147483647 &
	wait
}

##
#	Update polybar modules
function updatePolybar() {
	sPolybarctl message "action redshift hook 0"
	sPolybarctl message "action redshift-extended hook 0"
	sPolybarctl message "action brightness hook 0"
	sPolybarctl message "action brightness-extended hook 0"
}

function printUsage() {
	printf "%s\n" "
- Usage
	sBrightnessctl <options> [...]
	
- Options
	help                         # Show this help
	increase [amount]            # Increase the brightness by [amount] if specified or the default value otherwise
	decrease [amount]            # Decrease the brightness by [amount] if specified or the default value otherwise
	set <value>                  # Set the brightness to <value>
	print                        # Print current brightness label
	screensaver                  # Lower the brightness to the minimum
	redshift toggle              # Toggle on/off redshift
	redshift increase [amount]   # Increase the redshift temperature by [amount] if specified or the default value otherwise
	redshift decrease [amount]   # Decrease the redshift temperature by [amount] if specified or the default value otherwise
	redshift print               # Print the current redshift temperature (used in polybar)
	
- Abbreviations
	i = increase
	d = decrease
	s = set
	r = redshift
	t = toggle
"
}

case $1 in
increase | i)
	changeBrightness -inc $2
	updatePolybar
	sendNotification
	;;
decrease | d)
	changeBrightness -dec $2
	updatePolybar
	sendNotification
	;;
set | s)
	setBrightness "$2 -step $fade_fps -time $fade_time"
	updatePolybar
	sendNotification
	;;
screensaver)
	screensaver
	updatePolybar
	;;
print)
	printBrightness $2
	;;
redshift | r)
	case $2 in
	toggle | t)
		toggleRedshift
		updatePolybar
		sendNotification
		;;
	increase | i)
		if [[ -z $3 ]]; then
			changeTemp $((REDSHIFT_TEMP + defaultTempChangeValue))
		else
			changeTemp $((REDSHIFT_TEMP + $3))
		fi
		updatePolybar
		sendNotification
		;;
	decrease | d)
		if [[ -z $3 ]]; then
			changeTemp $((REDSHIFT_TEMP - defaultTempChangeValue))
		else
			changeTemp $((REDSHIFT_TEMP - $3))
		fi
		updatePolybar
		sendNotification
		;;
	print)
		printTemperature $3
		;;
	esac
	;;
help | *) printUsage ;;
esac
