#!/bin/bash
###########################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)

#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles

###########################################

# Max limit of mic capture level
maxVolume=100

#	Default icon
mutedIcon=microphone-sensitivity-muted-symbolic
lowIcon=microphone-sensitivity-low-symbolic
mediumIcon=microphone-sensitivity-medium-symbolic
highIcon=microphone-sensitivity-high-symbolic
warningIcon=microphone-sensitivity-high-symbolic

# Enable to play sound
playSound=true
# Sound to play (usually located in /usr/share/sounds/)
sound="/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"


# Notification body format
# where two %s are for ASCII bar and right text
notificationBodyFormat="<tt>%s<small><b>%6s</b></small></tt>"

# Length of the bar
notificationBarLength=20

# Step of the bar
notificationBarStep=5

# Semicolon separated list of characters for each step of the bar
# DrawBar.sh --help to show some alternatives
notificationBarChars="█;▆;▅;▃;▁;░"

# Semicolon separated list of characters for the borders of the bar.
# Monospaced font is recommended
# Seven semicolon (;) means no border
# DrawBar.sh --help to show some alternatives
notificationBarBorders=";;;;;;;"

# At which level you are controlling the boost and not intput volume anymore
warningLevel=60

# For how much milliseconds the notification will stay visible
timeout=1500

# Unique dunst notification id
uid=6904

# App name in dunst
appName="simonvic.Microphone"


##
#	Get current microphone input level
#	@return volume
function getVolume() {
	pactl get-source-volume @DEFAULT_SOURCE@ | head -n1 | cut -d '/' -f 2 | sed 's|%||' | sed 's| ||g'
}

##
#	Check if microphone is muted
#	@return true|false
function isMute() {
	[[ $(pactl get-source-mute @DEFAULT_SOURCE@) == "Mute: yes" ]] && echo true || echo false
}

##
#	Set microhpone mute
#	@param true|false
function setMute() {
	pactl set-source-mute @DEFAULT_SOURCE@ "$1"
}


##
#	Increase microphone input volume
#	@param increase amount
function increaseVolume() {
	setMute false
	local increaseAmount=$1
	local currentVolume=$(getVolume)
	[[ $((currentVolume + increaseAmount)) -gt $maxVolume ]] \
		&& setVolume "$maxVolume%" \
		|| setVolume "+$increaseAmount%"
}

##
#	Decrease microphone input volume
#	@param decrease amount
function decreaseVolume() {
	setMute false
	setVolume "-$1%"
}

##
#	Set microhpone volume
#	@param +|-amount
function setVolume() {
	pactl set-source-volume @DEFAULT_SOURCE@ "$1"
}

##
#	Build ASCII bar
#	@param current volume
function buildBar() {
	DrawBar.sh                               \
		--length $notificationBarLength      \
		--step $notificationBarStep          \
		--value $1                           \
		--bar-chars "$notificationBarChars"  \
		--borders "$notificationBarBorders"	
}

##
#	Send notification
function sendNotification() {

	local bar=""
	local summary=""
	local body=""
	local icon=""
	local urgency=""

	if [ $(isMute) = true ]; then
		# Building the volume bar
		bar=$(buildBar 0)
		icon=$mutedIcon
		urgency=normal
		summary="Muted"
	else

		local volume=$(getVolume)
		summary="$volume%"
		bar=$(buildBar $volume)
		if [ $volume -ge $warningLevel ]; then
			urgency=critical
			icon=$warningIcon
		elif [ $volume -gt 50 ]; then
			urgency=normal
			icon=$highIcon
		elif [ $volume -gt 20 ]; then
			urgency=normal
			icon=$mediumIcon
		elif [ $volume -le 20 ]; then
			urgency=normal
			icon=$lowIcon
		fi

	fi

	if [ $playSound = true ]; then
		paplay "$sound" &
	fi
	
	body=$(printf "$notificationBodyFormat" "$bar" "$summary" )
	# Send the notification
	dunstify -a "$appName" -i "$icon" -t "$timeout" -r "$uid" -u "$urgency" "$summary" "$body"
}


function printUsage() {
	printf "
- Usage
	sMicrophonectl <options>
	
- Options
	help                     # Show this help
	set <amount>             # Set input volume to given percentage
	increase <amount>        # Increase input volume by amount
	decrease <amount>        # Decrease input volume by amount
	mute [true|false|toggle] # Set mute status for the microphone

- Abbreviations
	i = increase
	d = decrease
	m = mute
"
}

case $1 in
set | s)
	setVolume "$2%"
	sendNotification
	;;
increase | i)
	increaseVolume "$2"
	sendNotification
	;;
decrease | d)
	decreaseVolume "$2"
	sendNotification
	;;
mute | m)
	setMute "$2"
	sendNotification
	;;
help | *) printUsage ;;
esac
