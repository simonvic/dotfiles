#!/bin/bash

###########################################
#	Made by
#       _                              _
#      (_)                            (_)
___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)

#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles

###########################################

# Where to store the selected player
selectedPlayer="/tmp/simonvic/sPlayerctl/selectedPlayer"

# Show more info about author and song
moreInfo=false

# [WIP] Show the song cover (spotify) as the notification icon
# Sometimes you might not be able to see the image, set useSpotifyCache to false
# to directly download the image (it might take more time to show the notification)
songCover=false
useSpotifyCache=false

iconCachePath=$HOME/.cache/spotifyIcon
spotifyCachePath=$HOME/.cache/spotify/Browser/Cache

# Icon used when selecting the player
selectPlayerIcon="/usr/share/icons/Vimix-Ruby/24/places/folder-music.svg"

#	Default urgency level [Available: low, normal, critical]
urgency=low

#	For how much milliseconds the notification will stay visible
timeout=5000

#	Unique dunst notification id
uid=6905
uid_selectPlayer=6906

# App name in dunst
appName="simonvic.Playerctl"

function getSelectedPlayer() {
	if [ ! -e $selectedPlayer ]; then
		createSelectedPlayerFile
	fi
	cat $selectedPlayer
}

function createSelectedPlayerFile() {
	mkdir -p $(echo $selectedPlayer | rev | cut -d"/" -f2- | rev)
	echo "" >$selectedPlayer
}

# Player name to control (if no player selected, it controls the first it finds)
player=$(getSelectedPlayer)

function getTitle() {
	playerctl -p "$player" metadata title
}

function getArtist() {
	playerctl -p "$player" metadata artist
}

function getAlbum() {
	playerctl -p "$player" metadata album
}

function getStatus() {
	playerctl -p "$player" status
}

function fetchSpotifyIcon() {
	if [ $useSpotifyCache = true ]; then
		for f in $(ls -r -d $spotifyCachePath/f*); do
			echo $f
			if [ $(file $f -b --extension) = "jpeg/jpg/jpe/jfif" ]; then
				icon=$f
				break
			fi
		done
	else
		wget $(playerctl metadata mpris:artUrl | sed s/open.spotify.com/i.scdn.co/g) -O $iconCachePath
		icon=$iconCachePath
	fi
}

function buildBody() {
	if [ $moreInfo = true ]; then
		printf "<big><b>$title</b></big><small> $artist\n$album\n<i>$player</i></small>"
	else
		printf "<big><b>$title</b></big><small> $artist</small>"
	fi
}

function sendNotification() {
	if [ $songCover = false ]; then
		status=$(getStatus)
		if [ $status = "Playing" ]; then
			icon=/usr/share/icons/Paper/scalable/actions/media-playback-start-symbolic.svg
		elif [ $status = "Paused" ]; then
			icon=/usr/share/icons/Paper/scalable/actions/media-playback-pause-symbolic.svg
		fi
	else
		fetchSpotifyIcon
	fi
	artist=$(getArtist)
	[ -z "$artist" ] && : || artist="($artist)"

	title=$(getTitle)
	album=$(getAlbum)
	body=$(buildBody)

	# Send the notification
	# dunstify -a "$appName" -i "$icon" -t "$timeout" -r "$uid" -u "$urgency" "$title" "$body"
	setPlayer $(dunstify -C "$uid" && dunstify -a "$appName" -A "auto,auto" $(buildPlayersDunstActions) -i "$icon" -t "$timeout" -r "$uid" -u "$urgency" "$title" "$body")

}

function info() {
	artist=$(getArtist)
	title=$(getTitle)
	album=$(getAlbum)
	[ -z "$artist" ] && : || artist="($artist)"
	if [ $moreInfo = true ]; then
		[ -z "$album" ] && : || album="[$album]"
		printf "$title $artist $album"
	else
		printf "$title $artist"
	fi
}

function selectPlayer() {
	case $1 in
	set)
		if [ -z $2 ]; then
			printUsage
		else
			case $2 in
			auto) echo "" >$selectedPlayer ;;
			*) echo "$2" >$selectedPlayer ;;
			esac
		fi
		;;

	*) sendNotificationSelectPlayer ;;
	esac
}

function buildPlayersDunstActions() {
	playerctl -l | awk '{ print "-A "$0"," $0 ; }'
}

function sendNotificationSelectPlayer() {
	prevSelectedPlayer=$(getSelectedPlayer)
	[ -z $prevSelectedPlayer ] && pastSelectionBody="Currently using <b>Auto</b> mode" || pastSelectionBody="Currently controlling <b>$prevSelectedPlayer</b>"
	setPlayer $(dunstify -C "$uid_selectPlayer" && dunstify -a $appName -A "auto,auto" $(buildPlayersDunstActions) -r "$uid_selectPlayer" -i "$selectPlayerIcon" -t "$timeout" -u "$urgency" "sPlayerctl | Playerctl" "Select a player you wish to control. \n <small>$pastSelectionBody</small>")
}

function setPlayer() {
	case $1 in
	1 | 2 | 3) : ;;
	auto) selectPlayer set auto ;;
	*) selectPlayer set $1 ;;
	esac
}

function sendNotificationPlayerSelected() {
	selected=$(getSelectedPlayer)
	[ -z $selected ] && body="Using automatic player mode" || body="You are now controlling <b>$selected</b>"
	dunstify -a $appName -r "$uid_selectPlayer" -i "$selectPlayerIcon" -t "$timeout" -u "$urgency" "sPlayerctl | Player select" "$body"
}

function printUsage() {
	printf "
- Usage
	sPlayerctl <options>
	
- Options
	help                                       # Show this help
	play-pause                                 # Toggle between play and pause
	stop [all]                                 # Stop music
	next                                       # Go to the next song
	previous                                   # Go to the previous song
	info                                       # Print info of the playing song
	select-player [set {auto|<player-name>}]   # Select what controller you whish to control. Use "auto" to automatic choose the first available player
	
- Abbreviations
	pp = play-pause
	s = stop
	n = next
	p = previous
	i = info
	sp = select-player
	a = all
"
}

case $1 in
play-pause | pp)
	playerctl -p "$player" play-pause && sendNotification
	;;
stop | s)
	case $2 in
	all | a)
		playerctl -a stop
		;;
	*)
		playerctl -p "$player" stop && sendNotification
		;;
	esac
	;;
next | n)
	playerctl -p "$player" next && sendNotification
	;;
previous | p)
	playerctl -p "$player" previous && sendNotification
	;;
info | i)
	info
	;;
select-player | sp)
	selectPlayer $2 $3 && sendNotificationPlayerSelected
	;;
help | *)
	printUsage
	;;
esac
