#!/bin/bash

###############################################################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)
#
#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles
#
###############################################################################

notificationUID=6905
notificationSelectPlayerUID=6906
notificationAppName="simonvic.Playerctl"
notificationSound=""
notificationUrgency=low
notificationTimeoutMS=2000

# Icon used when selecting the player
notificationSelectPlayerIcon="folder-music-symbolic"
notificationPlayingIcon="media-playback-start-symbolic"
notificationPausedIcon="media-playback-pause-symbolic"

notificationUseIconArt=false
notificationDelaySec=0.5

dmenu_theme="simonvic/glass/notification_actions"

# Where to store the selected player
selectedPlayerFile="/tmp/simonvic/sPlayerctl/selectedPlayer"

# reserved name for automatic player mode
autoPlayer="__auto__"

###############################################################################

usercfg=${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles/${0##*/}.sh
[[ -e "$usercfg" ]] && source "$usercfg"

###############################################################################


##
#	Get player name currently under control
#	@return player name
function getSelectedPlayer() {
	if [[ ! -e "$selectedPlayerFile" ]]; then
		mkdir -p "${selectedPlayerFile%/*}"
		echo "" | tee "$selectedPlayerFile"
	else
		cat "$selectedPlayerFile"
	fi
}

# Player name to control (if no player selected, it controls the first it finds)
player=$(getSelectedPlayer)

function getTitle() { playerctl -p "$player" metadata title; }
function getArtist() { playerctl -p "$player" metadata artist; }
function getAlbum() { playerctl -p "$player" metadata album; }
function getIcon() { playerctl -p "$player" metadata mpris:artUrl; }
function getStatus() { playerctl -p "$player" status; }

##
# Send notification
# @param summary
# @param body
# @param icon
# @param expire timeout (default: notificationTimeoutMS)
# @param notification UID (default: notificationUID)
function sendNotification() {
	[[ -n "$notificationSound" ]] && paplay "$notificationSound" --server /run/user/1000/pulse/native &
	notify-send \
		--app-name "$notificationAppName" \
		--replace-id "${5:-$notificationUID}" \
		--icon "$3" \
		--expire-time "${4:-$notificationTimeoutMS}" \
		--urgency "$notificationUrgency" \
		"$1" \
		"$2"
}

##
# Close the notification with the given id
# @param notification id
function closeNotification() {
	# hacky way to close notification via notify-send instead of dunstctl
	# send empty notification with 1ms expire time
	notify-send --replace-id "$1" --expire-time "1" " "
}

##
# Show notification and rofi dmenu for player selection
function promptPlayerSelection() {
	local pastSelectionBody=""
	if [[ -z "$player" ]]; then
		pastSelectionBody="Currently using <b>Auto</b> mode"
	else
		pastSelectionBody="Currently controlling <b>$player</b>"
	fi

	sendNotification "sPlayerctl | Playerctl" \
		"Select a player you wish to control.\n<small>$pastSelectionBody</small>" \
		"$notificationSelectPlayerIcon" \
		0 \
		"$notificationSelectPlayerUID"

	local selectedPlayer
	selectedPlayer=$(printf "%s\n" "$autoPlayer" "$(playerctl -l)" | rofi \
		-dmenu -p "" \
		-theme "$dmenu_theme" \
		-format "s")

	if [[ -z "$selectedPlayer" ]]; then
		closeNotification "$notificationSelectPlayerUID"
	else
		setPlayer "$selectedPlayer"
		local body=""
		if [[ "$selectedPlayer" == "$autoPlayer" ]]; then
			body="Using automatic player mode"
		else
			body="You're now controlling <b>$selectedPlayer</b>"
		fi
		sendNotification "sPlayerctl | Player selected" \
			"$body" \
			"$notificationSelectPlayerIcon" \
			"$notificationTimeoutMS" \
			"$notificationSelectPlayerUID"
	fi
}

##
# Set controlled player
# @param player name, or auto for automode
function setPlayer() {
	[[ ! -e "$selectedPlayerFile" ]] && mkdir -p "${selectedPlayerFile%/*}"
	case "$1" in
		"$autoPlayer") echo "" > "$selectedPlayerFile" ;;
		*) echo "$1" > "$selectedPlayerFile" ;;
	esac
}

##
# Send default notification when interacting with a player
# @param icon - Icon art will be used if notificationUseIconArt=true
function sendDefaultNotification() {
	sleep "$notificationDelaySec"
	local title; title=$(getTitle)
	local icon; [[ "$notificationUseIconArt" == true ]] && icon=$(getIcon) || icon=$1
	sendNotification "$title" \
		"<big>$title</big><small>\n$(getArtist)</small>" \
		"$icon"
}

function play() {
	playerctl -p "$player" play
	sendDefaultNotification "$notificationPlayingIcon"
}

function pause() {
	case "$1" in
		all | a) playerctl -a pause ;;
		*) playerctl -p "$player" pause ;;
	esac
	sendDefaultNotification "$notificationPausedIcon"
}

function playPause() {
	playerctl -p "$player" play-pause
	case "$(getStatus)" in
		"Playing") sendDefaultNotification "$notificationPlayingIcon" ;;
		"Paused") sendDefaultNotification "$notificationPausedIcon" ;;
	esac
}

##
# @param all - stop all players (Default: only selected player)
function stop() {
	case "$1" in
		all | a) playerctl -a stop ;;
		*) playerctl -p "$player" stop ;;
	esac
	sendDefaultNotification "$notificationPausedIcon"
}

function next() {
	playerctl -p "$player" next
	sendDefaultNotification "$notificationPlayingIcon"
}

function previous() {
	playerctl -p "$player" previous
	sendDefaultNotification "$notificationPlayingIcon"
}

##
#	Get formatted song info
#	@return info
function info() {
	local artist; artist=$(getArtist)
	[[ -n "$artist" ]] && artist="($artist)"
	printf "%s %s\n" "$(getTitle)" "$artist"
}

##
#	Select player to control
function selectPlayer() {
	case "$1" in
		set)
			if [[ -z "$2" ]]; then
				printUsage
			else
				setPlayer "$2"
			fi
			;;
		*) promptPlayerSelection ;;
	esac
}

function printUsage() {
	printf "%s\n" "
- Usage
	sPlayerctl <options>

- Options
	help                                       # Show this help
	play                                       # Start the player
	pause                                      # Pause the player
	play-pause                                 # Toggle between play and pause
	stop [all]                                 # Stop the player
	next                                       # Go to the next song
	previous                                   # Go to the previous song
	info                                       # Print info of the playing song
	select-player [set {auto|<player-name>}]   # Select what controller you whish to control. Use 'auto' to automatic choose the first available player

- Abbreviations
	pp = play-pause
	s = stop
	n = next
	p = previous
	i = info
	sp = select-player
	a = all
"
}

case "$1" in
	play) play ;;
	pause) pause "$2" ;;
	play-pause | pp) playPause ;;
	stop | s) stop "$2" ;;
	next | n) next ;;
	previous | p) previous ;;
	info | i) info ;;
	select-player | sp) selectPlayer "$2" "$3" ;;
	help | *) printUsage ;;
esac
