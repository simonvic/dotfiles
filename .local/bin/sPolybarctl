#!/bin/bash

###############################################################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)
#
#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles
#
###############################################################################


polybarLogsDir="/tmp/simonvic/sPolybarctl/logs"
messagesLogsDir="/tmp/simonvic/sPolybarctl/logs/msg"

visibleIcon=" 󰔡 "
invisibleIcon=" 󰨙 "

###############################################################################

usercfg=${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles/${0##*/}.sh
[[ -e "$usercfg" ]] && source "$usercfg"

###############################################################################

##
#	Get the pid of a polybar
#	@param polybar name
#	@return pid of a polybar or nothing if 
#		zero or more than one pid have been found
function getPolybarPid() {
	local pid; pid=$(pgrep -f "polybar $1")
	[[ $(echo "$pid" | wc -w) -eq 1 ]] && echo "$pid"
}


##
#	Get pid argument for polybar-msg
#	@param polybar name or empty
#	@return "-p $pid" or empty
function getPidArgument() {
	if [[ -n "$1" ]]; then
		local pid; pid=$(getPolybarPid "$1")
		if [[ -n "$pid" ]]; then
			echo "-p $pid"
		fi
	fi
}

function status() {
	case "$(xwininfo -name "polybar_$1" | grep "Map State:" | cut -d " " -f5)" in
		IsViewable) echo "$visibleIcon" ;;
		IsUnMapped) echo "$invisibleIcon" ;;
		*) echo "$invisibleIcon" ;;
	esac
}

##
#	Send a message (polybar-msg) to a polybar
#	@param message for polybar-msg
#	@param polybar name or empty to send msg to all polybar
function polybarMsg() {
	polybar-msg $(getPidArgument "$2") $1 >> "$messagesLogsDir/polybar-msg.log" 2>&1
}

##
#	Show a polybar
#	@param polybar name or empty to show all polybars
function show() {
	polybarMsg "cmd show" "$1"
}


##
#	Hide a polybar
#	@param polybar name or empty to hide all polybars
function hide() {
	polybarMsg "cmd hide" "$1"
}


##
#	Toggle a polybar
#	@param polybar name or empty to toggle all polybars
function toggle() {
	polybarMsg "cmd toggle" "$1"
}

##
#	Update all bar-switches state of a polybar via a hook
#	@param polybar name
function updateSwitches() {
	polybarMsg "action bar-switch-$1 hook 0"
}

##
#	Launch a polyabr
#	@param polybar name
function launchPolybar() {
	if [[ -n "$1" ]]; then
		polybar "$1" >> "$polybarLogsDir/$1.log" 2>&1 &
	fi
}

##
#	Kill all active polybars
function killPolybars() {
	polybarMsg "cmd quit"
}

##
#	Launch and hide the predefined polybars
function launch() {
	killPolybars

	launchPolybar "main"
	launchPolybar "secondary"
	launchPolybar "tertiary"
	launchPolybar "tray"

	sleep 2
	hide "secondary"
	hide "tertiary"
}

function printUsage() {
	printf "%s\n" "
- Usage
	sPolybarctl <options>

-Options
	help                           # Show this help
	launch                         # Launch all polybars defined
	show [bar name]                # Make the specified bar visible, or leave empty to show all bars
	hide [bar name]                # Make the specified bar invisible, or leave empty to hide all bars
	toggle [bar name]              # Show and hide the specified bar, or leave empty to toggle all
	status <bar name>              # Print status of the specified bar (useful to create a switch in a polybar itself)
	message <msg> [bar name]       # Send a message to the specified bar, or leave empty to send it to all bars
	                               #     Refer to man polybar-msg for the message format

- Abbreviations
	l = launch
	t = toggle
	s = show 
	h = hide
	m = message

- Active polybar names found:
"
	for polybarName in $(pgrep -a polybar | cut -d ' ' -f3); do
		printf "\t- %s\n" "$polybarName"
	done

}

mkdir -p "$polybarLogsDir"
mkdir -p "$messagesLogsDir"

case "$1" in
	launch | l) launch ;;
	toggle | t)
		toggle "$2"
		updateSwitches "$2"
		;;
	status) status "$2" ;;
	show | s)
		show "$2"
		updateSwitches "$2"
		;;
	hide | h)
		hide "$2"
		updateSwitches "$2"
		;;
	message | m) polybarMsg "$2" "$3" ;;
	help | *) printUsage ;;
esac
