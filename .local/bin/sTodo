#!/bin/zsh
###########################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)

#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles

###########################################

todoFile=$HOME/Documents/Productivity/Programming/scripts/todo/todo.txt
doneSymbol=
todoSymbol=
deletedSymbol=﫧

# Notification settings
icon=accessories-clipboard

# Length of the bar
notificationBarLength=20

# Step of the bar
notificationBarStep=5

# Semicolon separated list of characters for each step of the bar
# DrawBar.sh --help to show some alternatives
notificationBarChars="█;▆;▅;▃;▁;░"

# Semicolon separated list of characters for the borders of the bar.
# Monospaced font is recommended
# Seven semicolon (;) means no border
# DrawBar.sh --help to show some alternatives
notificationBarBorders=";;;;;;;"

# Max length of body in the notification
maxLength=15

# Default urgency level [Available: low, normal, critical]
urgency=normal

# For how much milliseconds the notification will stay visible
timeout=60000

# Unique dunst notification id
uid=6908

# App name in dunst
appName="simonvic.TODO"

########################################

printHeader() {
	echo "
··················································
··················································
████████╗ ██████╗       ██████╗  ██████╗ 
╚══██╔══╝██╔═══██╗      ██╔══██╗██╔═══██╗
   ██║   ██║   ██║█████╗██║  ██║██║   ██║
   ██║   ██║   ██║╚════╝██║  ██║██║   ██║
   ██║   ╚██████╔╝      ██████╔╝╚██████╔╝
   ╚═╝    ╚═════╝       ╚═════╝  ╚═════╝ 
··················································
"
}

printUsage() {
	echo "
Usage
	todo [options]

Options
	help   show this help
		
	# Query commands
	list [done|todo|deleted] [name]    # List with filters
		done                              # List things done
		todo                              # List things still to do
		deleted                           # List things cancelled
	
	# Edit commands
	new <name>                         # Add a new thing to do with name <name>
	do <id>                            # Mark it done
	undo <id>                          # Mark it undone
	delete <id>                        # Mark it deleted
	edit                               # Edit manually the todo list
	
	#Other
	notification [done|todo|deleted]   # Show todo list in a notification
"
}

function getCount() {
	case $1 in
	done)
		grep -e "$doneSymbol" $todoFile | grep "$2" | wc -l
		;;
	todo)
		grep -e "$todoSymbol" $todoFile | grep "$2" | wc -l
		;;
	deleted)
		grep -e "$deletedSymbol" $todoFile | grep "$2" | wc -l
		;;
	*)
		grep -e "$1" $todoFile | wc -l
		;;
	esac
}

function list() {
	case $1 in
	done)
		grep -e "$doneSymbol" $todoFile | grep "$2"
		;;
	todo)
		grep -e "$todoSymbol" $todoFile | grep "$2"
		;;
	deleted)
		grep -e "$deletedSymbol" $todoFile | grep "$2"
		;;
	*)
		grep -e "$1" $todoFile
		;;
	esac
}

function addNew() {
	if [ -z "$1" ]; then
		printUsage
	else
		newID=$(($(tail -n 1 $todoFile | cut -d "[" -f2 | cut -d "]" -f1) + 1))
		echo "$todoSymbol [$newID] $1" >>$todoFile
	fi
}

function mark() {
	if [ -z "$2" ]; then
		printUsage
	else
		case $1 in
		done)
			sed -i "s/^\($deletedSymbol\|$todoSymbol\) \[$2\]/$doneSymbol \[$2\]/g" $todoFile
			;;
		todo)
			sed -i "s/^\($deletedSymbol\|$doneSymbol\) \[$2\]/$todoSymbol \[$2\]/g" $todoFile
			;;
		deleted)
			sed -i "s/^\($todoSymbol\|$doneSymbol\) \[$2\]/$deletedSymbol \[$2\]/g" $todoFile
			;;
		*)
			printUsage
			;;
		esac
	fi
}

function editFile() {
	xdg-open $todoFile &
}

function buildBar() {
	DrawBar.sh                               \
		--length $notificationBarLength      \
		--step $notificationBarStep          \
		--value $1                           \
		--bar-chars "$notificationBarChars"  \
		--borders "$notificationBarBorders"
}

function sendNotification() {
	doneCount=$(getCount done $2)
	todoCount=$(getCount todo $2)
	deletedCount=$(getCount deleted $2)
	totalCount=$(getCount)
	todoPercent=$((doneCount * 100 / (totalCount - deletedCount)))

	summary="$todoCount todo | $doneCount done | $deletedCount deleted"

	# Start building the body of notification

	# If the list is too big cut it
	length=$(getCount $1 $2)
	if [ $length -ge $maxLength ]; then
		body="
<small>$(list $1 $2 | head -$maxLength)
... $(($length - $maxLength)) more
</small>
"
	else
		body="
<small>$(list $1 $2)</small>
"
	fi

	# Add bar and statistics
	body+="
$(buildBar $todoPercent) $todoPercent%
<b>$todoSymbol $todoCount</b> todo <b>│</b> <b>$doneSymbol $doneCount</b> done <b>│</b> <b>$deletedSymbol $deletedCount</b> deleted <b>│</b> <b> $totalCount</b> total
"
	# Old notification must be closed if still pending for user action, as -r isn't enought
	# Just a temporary hack :(

	case $(dunstify -C "$uid" && dunstify -a $appName -A "listAll,  List all" -A "listDone,  List done" -A "listTodo,  List to do" -A "listDeleted,  List deleted" -A "todoHelp,  TODO help" -A "edit,  Edit the todo list" -i "$icon" -r "$uid" -t "$timeout" -u "$urgency" "$summary" "$body" &) in
	edit)
		editFile
		;;
	listAll)
		/usr/bin/rofi-sensible-terminal -e "sTodo list" --hold
		;;
	listDone)
		/usr/bin/rofi-sensible-terminal -e "sTodo list done" --hold
		;;
	listTodo)
		/usr/bin/rofi-sensible-terminal -e "sTodo list todo" --hold
		;;
	listDeleted)
		/usr/bin/rofi-sensible-terminal -e "sTodo list deleted" --hold
		;;
	todoHelp)
		/usr/bin/rofi-sensible-terminal -e "sTodo help" --hold
		;;
	*)
		# No choise
		;;
	esac
}

function createTodoFile() {
	folderPath=$(echo $todoFile | rev | cut -d"/" -f2- | rev)
	mkdir -p $folderPath
	echo " [0] Check out https://github.com/simonvic/dotfiles" >$todoFile
	echo " [1] Give a star to https://github.com/simonvic/dotfiles" >>$todoFile
}

# Create the todo file if it's not present
if [ ! -e $todoFile ]; then
	createTodoFile
fi

case $1 in
# Query
list)
	printHeader
	list $2 $3
	;;
count)
	getCount $2 $3
	;;
# Edit
new)
	addNew $2
	;;
do)
	mark done $2
	;;
undo)
	mark todo $2
	;;
delete)
	mark deleted $2
	;;
edit)
	editFile
	;;
# Other
notification)
	sendNotification $2 $3
	;;
help)
	printHeader
	printUsage
	;;
*)
	printHeader
	list todo
	;;
esac
