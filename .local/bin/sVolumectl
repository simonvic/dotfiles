#!/bin/bash
###########################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)

#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles

###########################################

# Max limit of the volume
maxVolume=100

#	Default icon
mutedIcon=audio-volume-muted-symbolic
lowIcon=audio-volume-low-symbolic
mediumIcon=audio-volume-medium-symbolic
highIcon=audio-volume-high-symbolic
warningIcon=audio-volume-high-symbolic
overamplifiedIcon=audio-volume-overamplified-symbolic


# Enable to play sound
playSound=true
# Sound to play (usually located in /usr/share/sounds/)
sound="/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"

# Notification body format
# where two %s are for ASCII bar and right text
notificationBodyFormat="<tt>%s<small><b>%6s</b></small></tt>"

# Length of the bar
notificationBarLength=20

# Step of the bar
notificationBarStep=5

# Semicolon separated list of characters for each step of the bar
# DrawBar.sh --help to show some alternatives
notificationBarChars="█;▆;▅;▃;▁;░"

# Semicolon separated list of characters for the borders of the bar.
# Monospaced font is recommended
# Seven semicolon (;) means no border
# DrawBar.sh --help to show some alternatives
notificationBarBorders=";;;;;;;"

# At which level the volume is considered too high
warningLevel=60

# At which level the volume is considered overamplified
overamplifiedLevel=100

# For how much milliseconds the notification will stay visible
timeout=1500

# Unique dunst notification id
uid=6909

# App name in dunst
appName="simonvic.Volume"


##
#	Get current volume
#	@return volume
function getVolume() {
	pactl get-sink-volume @DEFAULT_SINK@ | head -n1 | cut -d '/' -f 2 | sed 's|%||' | sed 's| ||g'
}

##
#	Check if is muted
#	@return true|false
function isMute() {
	[[ $(pactl get-sink-mute @DEFAULT_SINK@) == "Mute: yes" ]] && echo true || echo false
}

##
#	Set mute
#	@param true|false
function setMute() {
	pactl set-sink-mute @DEFAULT_SINK@ "$1"
}

##
#	Increase volume
#	@param amount
function increaseVolume() {
	setMute false
	local increaseAmount=$1
	local currentVolume=$(getVolume)
	[[ $((currentVolume + increaseAmount)) -gt $maxVolume ]] \
		&& setVolume "$maxVolume%" \
		|| setVolume "+$increaseAmount%"
}

##
#	Decrease volume
#	@param amount
function decreaseVolume() {
	setMute false
	setVolume "-$1%"
}

##
#	Set volume
#	@param +|- amount
function setVolume() {
	pactl set-sink-volume @DEFAULT_SINK@ "$1"
}

##
#	Build ASCII bar
#	@param current volume
function buildBar() {
	DrawBar.sh                               \
		--length $notificationBarLength      \
		--step $notificationBarStep          \
		--value $1                           \
		--bar-chars "$notificationBarChars"  \
		--borders "$notificationBarBorders"	
}


##
#	Send notification
function sendNotification() {

	local bar=""
	local summary=""
	local body=""
	local icon=""
	local urgency=""

	if [ $(isMute) = true ]; then
		# Building the volume bar
		bar=$(buildBar 0)
		icon=$mutedIcon
		urgency=normal
		summary="Muted"
	else

		local volume=$(getVolume)
		bar=$(buildBar $volume)
		summary="$volume%"

		if [ $volume -ge $overamplifiedLevel ]; then
			urgency=critical
			icon=$overamplifiedIcon
		elif [ $volume -ge $warningLevel ]; then
			urgency=critical
			icon=$warningIcon
		elif [ $volume -gt 50 ]; then
			urgency=normal
			icon=$highIcon
		elif [ $volume -gt 20 ]; then
			urgency=normal
			icon=$mediumIcon
		elif [ $volume -le 20 ]; then
			urgency=normal
			icon=$lowIcon
		fi

	fi

	if [ $playSound = true ]; then
		paplay "$sound" &
	fi
	
	body=$(printf "$notificationBodyFormat" "$bar" "$summary" )
	# Send the notification
	dunstify -a "$appName" -i "$icon" -t "$timeout" -r "$uid" -u "$urgency" "$summary" "$body"
}

function printUsage() {
	printf "
- Usage
	sVolumectl <options>
	
- Options
	help                     # Show this help
	set <amount>             # Set speaker/headphone volume at the given percentage
	increase <amount>        # Increase speaker/headphone volume by amount
	decrease <amount>        # Decrease speaker/headphone volume by amount
	mute [true|false|toggle] # Set mute status for the speakers/headphones
	
- Abbreviations
	s = set
	i = increase
	d = decrease
	m = mute
"
}

case $1 in
set | s)
	setVolume "$2%"
	sendNotification
	;;
increase | i)
	# Set the volume on (if it was muted)
	increaseVolume "$2"
	sendNotification
	;;
decrease | d)
	decreaseVolume "$2"
	sendNotification
	;;
mute | m)
	setMute "$2"
	sendNotification
	;;
help | *) printUsage ;;
esac
