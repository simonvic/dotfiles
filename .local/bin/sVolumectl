#!/bin/bash

###############################################################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)
#
#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles
#
###############################################################################

notificationUID=6909
notificationAppName="simonvic.Volume"
notificationSound="/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"
notificationTimeoutMS=1500

# Default icon
notificationMutedIcon=audio-volume-muted-symbolic
notificationLowIcon=audio-volume-low-symbolic
notificationMediumIcon=audio-volume-medium-symbolic
notificationHighIcon=audio-volume-high-symbolic
notificationWarningIcon=audio-volume-high-symbolic
notificationOveramplifiedIcon=audio-volume-overamplified-symbolic

notificationSound="/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"

# Notification body format
# where two %s are for ASCII bar and right text
# you can skip by using %.s
notificationBodyFormat="<tt>%s<small><b>%6s</b></small></tt>"

# Send volume hint with notify-send. Dunst will show a progress bar
notificationSendVolumeHint=false

notificationBarLength=20
notificationBarStep=5
notificationBarChars="█;▆;▅;▃;▁;░"
notificationBarBorders=";;;;;;;"
# notificationBarChars="█;▉;▊;▌;▎; "
# notificationBarBorders=";;;;▏;;;"

# Max limit of the volume
maxVolume=100

# At which level the volume is considered too high
warningLevel=60

# At which level the volume is considered overamplified
overamplifiedLevel=100

###############################################################################

usercfg=${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles/${0##*/}.sh
[[ -e "$usercfg" ]] && source "$usercfg"

###############################################################################

##
#	Get current volume
#	@return volume
function getVolume() {
	local volume
	volume=$(pactl get-sink-volume @DEFAULT_SINK@)
	volume=${volume%%% /*}
	printf "%s" "${volume##* }"
}

##
#	Check if is muted
#	@return true|false
function isMute() {
	[[ $(pactl get-sink-mute @DEFAULT_SINK@) == "Mute: yes" ]] && echo true || echo false
}

##
#	Set mute
#	@param true|false
function setMute() {
	pactl set-sink-mute @DEFAULT_SINK@ "$1"
}


##
#	Set volume
#	@param +|- amount
function setVolume() {
	pactl set-sink-volume @DEFAULT_SINK@ "$1"
}

##
#	Increase volume
#	@param amount
function increaseVolume() {
	setMute false
	local increaseAmount=$1
	local currentVolume=$(getVolume)
	if [[ $((currentVolume + increaseAmount)) -gt $maxVolume ]]; then
		setVolume "$maxVolume%"
	else
		setVolume "+$increaseAmount%"
	fi
}

##
#	Decrease volume
#	@param amount
function decreaseVolume() {
	setMute false
	setVolume "-$1%"
}

##
#	Build ASCII bar
#	@param current volume
function buildBar() {
	DrawBar.sh                               \
		--length $notificationBarLength      \
		--step $notificationBarStep          \
		--value "$1"                         \
		--bar-chars "$notificationBarChars"  \
		--borders "$notificationBarBorders"	
}


##
#	Send notification
function sendNotification() {
	local volume=$(getVolume)
	local summary="$volume%"
	local urgency="normal"
	local bar=$(buildBar "$volume")
	local body=""
	local icon=""
	local hintValue=""

	if [[ $(isMute) == true ]]; then
		icon=$notificationMutedIcon
		summary="Muted"
	else
		summary="$volume%"
		if [[ $volume -ge $overamplifiedLevel ]]; then
			icon=$notificationOveramplifiedIcon
			urgency="critical"
		elif [[ $volume -ge $warningLevel ]]; then
			icon=$notificationWarningIcon
			urgency="critical"
		elif [[ $volume -gt 50 ]]; then
			icon=$notificationHighIcon
		elif [[ $volume -gt 20 ]]; then
			icon=$notificationMediumIcon
		elif [[ $volume -le 20 ]]; then
			icon=$notificationLowIcon
		fi
		[[ -n "$notificationSound" ]] && paplay "$notificationSound" --server /run/user/1000/pulse/native &
	fi

	body=$(printf "$notificationBodyFormat" "$bar" "$summary" )
	[[ $notificationSendVolumeHint == true ]] && hintValue=$volume
	notify-send \
		"$summary" "$body" \
		--app-name "$notificationAppName" \
		--replace-id "$notificationUID" \
		--icon "$icon" \
		--expire-time "$notificationTimeoutMS" \
		--urgency "$urgency" \
		${hintValue:+--hint int:value:$hintValue}
}

function printUsage() {
	printf "%s\n" "
- Usage
	sVolumectl <options>
	
- Options
	help                     # Show this help
	set <amount>             # Set speaker/headphone volume at the given percentage
	increase <amount>        # Increase speaker/headphone volume by amount
	decrease <amount>        # Decrease speaker/headphone volume by amount
	mute [true|false|toggle] # Set mute status for the speakers/headphones
	
- Abbreviations
	s = set
	i = increase
	d = decrease
	m = mute
"
}

case $1 in
	set | s) setVolume "$2%" && sendNotification ;;
	increase | i) increaseVolume "$2" && sendNotification ;;
	decrease | d) decreaseVolume "$2" && sendNotification ;;
	mute | m) setMute "$2" && sendNotification ;;
	help | *) printUsage ;;
esac
