#!/bin/bash

###############################################################################
#	Made by
#       _                              _
#      (_)                            (_)
#  ___  _  ____    ___   ____   _   _  _   ____
# /___)| ||    \  / _ \ |  _ \ | | | || | / ___)
#|___ || || | | || |_| || | | | \ V / | |( (___
#(___/ |_||_|_|_| \___/ |_| |_|  \_/  |_| \____)
#
#	Check updates and give a look at my dotfiles here:
#		https://github.com/simonvic/dotfiles
#
###############################################################################

notificationUID=6910
notificationAppName="simonvic.WiFi"
notificationSound="/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga"
notificationTimeoutMS=2000
notificationUrgency=normal
notificationDefaultIcon="network-wireless-symbolic"

matchingMode="fuzzy"

dmenu_theme="simonvic/glass/notification_actions"

###############################################################################

usercfg=${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles/${0##*/}.sh
[[ -e "$usercfg" ]] && source "$usercfg"

###############################################################################

##
# Scan for wifi signals
# @param rescan (default: auto)
# @return wifi signals
function getSignals() {
	nmcli -get-values ACTIVE,SIGNAL,CHAN,FREQ,RATE,SECURITY,SSID device wifi list --rescan "${1:-auto}"
}

##
# Get index of active wifi SSID
# @param newline separated signals
# @return active index
function getActive() {
	local count=0
	local activeIdx=""
	while read -r signal; do
		if [[ ${signal%%:*} == "yes" ]]; then
			activeIdx=$activeIdx,$count
		fi
		((count++))
	done <<< "$1"
	echo $activeIdx
}

##
# Print pretty wifi signal (meant for display in rofi)
# @param active
# @param strength
# @param channel
# @param frequency
# @param rate
# @param security
# @param ssid
# @return pretty output
function prettifyWifiSignal() {
	local active=$1
	local strength=$2
	local channel=$3
	local frequency=$4
	local rate=$5
	local security=$6
	local ssid=$7

	local output
	
	# [[ "$active" == "yes" ]] && output+=" "

	if [[ "$strength" -le 25 ]]; then
		output+="▂▁▁▁"
	elif [[ "$strength" -le 50 ]]; then
		output+="▂▄▁▁"
	elif [[ "$strength" -le 75 ]]; then
		output+="▂▄▆▁"
	else
		output+="▂▄▆█"
	fi

	output+=" <b>$ssid</b>"

	case "$frequency" in
		2*) frequency="2.4Ghz" ;;
		5*) frequency="5Ghz" ;;
		6*) frequency="6Ghz" ;;
	esac
	output+=" | <small><tt>󰘊 $frequency $channel</tt></small>"
	# output+=" | <small><tt>$rate</tt></small>"
	# output+=" | <small><tt> $security</tt></small>"

	printf "%s\n" "$output"
}

##
# Helper function for notifications
# @param body
# @param icon (default: $notificationDefaultIcon)
# @param timeout (default: notificationTimeoutMS)
function sendNotification() {
	[[ -n "$notificationSound" ]] && paplay "$notificationSound" --server /run/user/1000/pulse/native &
	notify-send \
		--app-name "$notificationAppName" \
		--replace-id "$notificationUID" \
		--icon "${2:-$notificationDefaultIcon}" \
		--expire-time "${3:-$notificationTimeoutMS}" \
		--urgency "$notificationUrgency" \
		"WiFi" "$1"
}

##
# Prompt wifi selection
# @param rescan policy (auto|yes|no)
function promptSelection() {
	sendNotification "Scanning for WiFi signals..." "network-wireless-acquiring-symbolic" 0
	local signals; signals=$(getSignals "$1")
	local prettyOutput
	local idx=0
	local activeIdx
	while read -r wifi; do
		local active strength channel frequency rate security ssid
		IFS=":" read -r active strength channel frequency rate security ssid <<< "$wifi"
		prettyOutput+="$(prettifyWifiSignal "$active" "$strength" "$channel" "$frequency" "$rate" "$security" "$ssid")\n"
		# NOTE: Can we assume to be connected to only one wifi?
		[[ "$active" == "yes" ]] && activeIdx=$idx
		((idx++))
	done <<< "$signals"

	sendNotification "Select WiFi ..." "network-wireless-acquiring-symbolic" 0
	local selectedIdx; selectedIdx=$(printf "%b" "$prettyOutput" | rofi -dmenu \
		-i \
		-markup-rows \
		-matching "$matchingMode" \
		-format "i" \
		-a "$activeIdx" \
		-p " " \
		-theme "$dmenu_theme" \
	)

	if [[ -z "$selectedIdx" ]]; then
		# hacky way to close notification via notify-send
		# replace current notification (id) with one that lasts 1ms
		notify-send --replace-id "$notificationUID" --expire-time 1 " "
		return
	fi

	local selectedWifi; selectedWifi=$(echo "$signals" | head -$((selectedIdx + 1)) | tail -1)
	local ignored selectedSSID
	IFS=":" read -r ignored ignored ignored ignored ignored ignored selectedSSID <<< "$selectedWifi"

	sendNotification "Connecting to <b>$selectedSSID</b> ..." "network-wireless-acquiring-symbolic" 0
	nmcli d w c "$selectedSSID"

	local signalIcon="network-wireless-signal-"
	if [[ "$strength" -le 25 ]]; then
		signalIcon+="low"
	elif [[ "$strength" -le 50 ]]; then
		signalIcon+="ok"
	elif [[ "$strength" -le 75 ]]; then
		signalIcon+="good"
	else
		signalIcon+="excellent"
	fi

	sendNotification "Connected to <b>$selectedSSID</b>" "$signalIcon"
}

function printUsage() {
	printf "%s\n" "
- Usage
	sWifi <options>
	
-Options
	help                   # Show this help
	rescan [auto|yes|no]   # Specify rescan behaviour (Default: yes)
	
- Abbreviations
	r = rescan
"
}
###############################################################################

case "$1" in
	rescan | r) promptSelection "${2:-yes}" ;;
	help) printUsage ;;
	*) promptSelection
esac

